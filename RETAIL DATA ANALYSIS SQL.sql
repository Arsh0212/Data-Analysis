-- HOW TO IMPORT DATA IN POSTGRESQL
-- FIRST CREATE A TABLE WITH FOLLOWING FIELDS

CREATE TABLE RETAIL_DATA_INFO
(
   Year INT,
   Month VARCHAR(10),
   GEO VARCHAR(15),
   Product_Category VARCHAR(60),
   Products VARCHAR(60),
   VALUE FLOAT,
   Taxable BOOLEAN,
   Tax_Rate FLOAT,
   VAT FLOAT, 
   Essential VARCHAR(20),
   COORDINATE FLOAT,
   UOM VARCHAR(10)
);

-- REFRESH THE DATABASE WHERE THE TABLE IS STORED
-- THEN FIND AND CLICK THE RETAIL_DATA_INFO TABLE AND CHOOSE IMPORT/EXPORT DATA
-- THEN CHOOSE THE CSV FILE AND CLICK OK


-- LET'S START THE ANALYTICS PART

SELECT *
FROM RETAIL_DATA_INFO;

-- THE TABLE HAS A TOTAL OF 12 FIELDS WITH 118482 ROWS

-- NOW LETS TRANSFORM THE DATA AND REMOVE REDUNDANCY
-- LET'S FIRST STANDARDIZE MONTHS BY CREATING A NEW TABLE 


CREATE TABLE MONTH_MAP (
    MONTH_NAME VARCHAR(20),
    MONTH_ORDER INT
);

INSERT INTO MONTH_MAP VALUES
('January', 1),
('February', 2),
('March', 3),
('April', 4),
('May', 5),
('June', 6),
('July', 7),
('August', 8),
('September', 9),
('October', 10),
('November', 11),
('December', 12);

-- NOW THIS TABLE CAN BE JOINED ANYTIME I WANT TO SORT THE DATA ACCORDING TO MONTHS

-- NOW LETS NORMALIZE PROVINCE

ALTER TABLE RETAIL_DATA_INFO
ADD COLUMN PROVINCE INT;

UPDATE RETAIL_DATA_INFO
SET PROVINCE = SPLIT_PART(GEO,' ',2)::INT;

ALTER TABLE RETAIL_DATA_INFO
DROP COLUMN GEO;

-- LETS SEE IF THERE ARE MORE THAN ONE UOM

SELECT DISTINCT(UOM)
FROM RETAIL_DATA_INFO
;

-- AS THERE IS ONLY ONE UOM 'DOLLARS' LETS DROP THE COLUMN

ALTER TABLE RETAIL_DATA_INFO
DROP COLUMN UOM;

-- LETS ALSO SPLIT THE PRODUCTS COLUMN INTO QUANTITY AND PRODUCT
-- IT MIGHT COME IN HANDY


-- CREATE THE COLUMNS QUANTITY AND PRODUCT
ALTER TABLE RETAIL_DATA_INFO
ADD COLUMN QUANTITY VARCHAR(20),
ADD COLUMN PRODUCT VARCHAR (40);

-- SPLIT THE PRODUCTS COLUMNS AND INSERT INTO THE 2 COLUMNS
UPDATE RETAIL_DATA_INFO
SET QUANTITY = SPLIT_PART(PRODUCTS,',',2),
PRODUCT = SPLIT_PART(PRODUCTS,',',1);


-- TEA HAS NO COMMA SEPARATED UNITS BUT SINCE IT IS 20 BAGS WE CAN DO IT MANUALLY
UPDATE RETAIL_DATA_INFO
SET QUANTITY='20 BAGS'
WHERE PRODUCT LIKE '%Tea%';


-- LET'S DO SOME IN DEPTH ANALYSIS
SELECT distinct(products)
FROM RETAIL_DATA_INFO
;

-- THERE ARE 110 DISTINCT PRODUCTS

SELECT DISTINCT(PRODUCT)
FROM RETAIL_DATA_INFO
;

-- BUT THERE ARE ONLY 105 PRODUCT TYPES
-- MEANING SOME PRODUCTS HAVE DIFFERENT PACKAGING


-- LET'S FIND THE PRODUCTS WITH DIFFERENT PACKAGING

SELECT DISTINCT(RDI.PRODUCTS)
FROM 
(
    SELECT DISTINCT(PRODUCTS), PRODUCT, QUANTITY
    FROM RETAIL_DATA_INFO
) AS UNIQ_PRODS 
INNER JOIN 
RETAIL_DATA_INFO RDI 
ON 
(
    UNIQ_PRODS.PRODUCT=RDI.PRODUCT 
    AND
    UNIQ_PRODS.QUANTITY<>RDI.QUANTITY
)
ORDER BY RDI.PRODUCTS
;

-- LIST OF PRODUCTS WITH DIFFERENT PACKAGING

"products"
"Milk, 1 litre"
"Milk, 2 litres"
"Milk, 4 litres"
"Onions, 1.36 kilograms"
"Onions, per kilogram"
"Oranges, 1.36 kilograms"
"Oranges, per kilogram"
"Potatoes, 4.54 kilograms"
"Potatoes, per kilogram"


-- LETS SEE ALL THE DIFFERENT PRODUCT CATEGORY
SELECT DISTINCT(PRODUCT_CATEGORY)
FROM RETAIL_DATA_INFO;


product_category
"Infant & Baby Products"
"Toiletries & Cleaning"
"Canned & Jarred Goods"
"Meat & Poultry"
"Vegetables"
"Cooking Essentials"
"Other"
"Dairy & Eggs"
"Legumes & Dry Goods"
"Nuts & Snacks"
"Grains & Bakery"
"Fruits"
"Frozen Foods"
"Beverages"

-- THE "Other" PRODUCT CATEGORY HAS ONLY LIME AS THE PRODUCT

-- CHECKING IF A PRODUCT COMES IN BOTH ESSENTIAL AND NON-ESSENTIAL CATEGORIES AT DIFFERENT PROVINCE
SELECT DISTINCT(PRODUCT)
FROM RETAIL_DATA_INFO
WHERE ESSENTIAL = 'Non-Essential'
INTERSECT
SELECT DISTINCT(PRODUCT)
FROM RETAIL_DATA_INFO
WHERE ESSENTIAL = 'Essential'
;

-- THE RESULT WAS NULL , SO THERE IS NO DUPLICATES IN ESSENTIAL AND NON-ESSENTIAL

-- LETS SEE WHICH PROVINCE IS MAPPED TO WHICH COORDINATES

SELECT PROVINCE, FLOOR(COORDINATE)
FROM RETAIL_DATA_INFO
GROUP BY PROVINCE,FLOOR(COORDINATE)
ORDER BY PROVINCE;

"province"	"floor"
    1	    11
    2	    1
    3	    2
    4	    3
    5	    4
    6	    5
    7	    6
    8	    7
    9	    8
    10	    9
    11	    10

-- NOW LET'S DIVE DEEPER INTO ANALYSIS

-- FIND WHICH PROVINCE PROVIDES THE CHEAPEST OF THE ITEMS FOR A GIVEN YEAR SAY 2023
-- APPROACH 1


SELECT * FROM 
RETAIL_DATA_INFO
WHERE (PRODUCT,VAT) IN(
SELECT PRODUCT,MIN(VAT) 
FROM RETAIL_DATA_INFO
GROUP BY PRODUCT
)
ORDER BY PRODUCTS;


-- APPROACH 2

WITH LOWEST_VALUE AS
(
SELECT PRODUCT, PROVINCE, VAT,ROW_NUMBER() OVER(PARTITION BY PRODUCT ORDER BY VAT) AS RNK
FROM RETAIL_DATA_INFO
)
SELECT *
FROM LOWEST_VALUE
WHERE RNK=1;

-- MUCH MORE OPTIMIZED


-- LETS FIND THE PERCENTAGE CHANGE OF PRICE OVER YEAR OF A CERTAIN PRODUCT AT CERTAIN PROVINCE

SELECT * , ((PRC/(LAG(PRC) OVER()))-1)*100 AS PERCENT_CHANGE
FROM(
SELECT RDI.YEAR ,RDI.PROVINCE, RDI.PRODUCT , AVG(RDI.VAT) AS PRC
	FROM RETAIL_DATA_INFO RDI
	WHERE RDI.PROVINCE=5 AND RDI.PRODUCT='Broccoli'
	GROUP BY RDI.YEAR, RDI.PROVINCE, RDI.PRODUCT
	ORDER BY RDI.YEAR
) AS TEMPO;

-- WE WILL DO FURTHER ANALYSIS USING PYTHON PANDAS
